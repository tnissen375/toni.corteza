version: "3.9"
networks:
 {{ nginx_network_name }}:
    driver: overlay
    external: true
 {{ stack_network_name }}:
    driver: overlay
    external: true

services:
  {{ deploy_name }}_db:
    image: postgres:{{ kanban_postgres_version }}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - "{{ deploy_name }}_db:/var/lib/postgresql/data"
    environment:
      POSTGRES_DB: "{{ kanban_postgres_db }}"
      POSTGRES_USER: "{{ kanban_postgres_user }}"
      POSTGRES_PASSWORD: "{{ kanban_postgres_password }}"
      #POSTGRES_HOST_AUTH_METHOD: "trust"
    ports:
      - '5432'      
    networks:
      - {{ stack_network_name }}
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{ kanban_postgres_user }} -d {{ kanban_postgres_db }}"]
      interval: 10s
      timeout: 5s
      retries: 5   

# vs code alpine not supported - so no remote debug with standard image :/
  {{ deploy_name }}:
    image: {{ image_kanban }}
    volumes:
      - {{ deploy_name }}_user-avatars:/app/public/user-avatars
      - {{ deploy_name }}_project-background-images:/app/public/project-background-images
      - {{ deploy_name }}_attachments:/app/public/attachments
      - /etc/localtime:/etc/localtime:ro      
#      - "~/.ssh:/root/.ssh"
#    cap_add:
#    - SYS_PTRACE     
#   tty: true
    ports:
      - "1337"
#      - "{{ host_ssh_port }}:22" # Attention: port {{ host_ssh_port }} is opened on host and bypasses UFW!!! This is ok here, cause you need a valid sshkey but this behavior may be not suspected from docker ;)
#    command:
#      bash -c "/usr/sbin/sshd && ./start.sh"
#bash -c "service ssh start"
    networks:
      - {{ nginx_network_name }}
      - {{ stack_network_name }}
    environment:
      BASE_URL: "https://{{ nginx_subdomain }}{{ domain }}"
      DATABASE_URL: "postgresql://{{ kanban_postgres_user }}:{{ kanban_postgres_password }}@{{ deploy_name }}_db/{{ kanban_postgres_db }}"
      SECRET_KEY: "1526fb83e74b6f548de34d743079905ae2c90329b70914bff1c7382fbd3ebe04b16af23fa50101ac77ffd8dab2f0d0e51d070c3e18cb0e2efff7c04b294e0cc2"
      NODE_ENV: production
    healthcheck: { test: ["CMD", "node", "./healthcheck.js"], timeout: 3s, interval: 10s, retries: 20 }
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  {{ deploy_name }}_user-avatars:
  {{ deploy_name }}_project-background-images:
  {{ deploy_name }}_attachments:
  {{ deploy_name }}_db:

#https://docs.cortezaproject.org/corteza-docs/2021.3/devops-guide/index.html#_configure_docker_compose_yaml
version: "3.9"
networks:
 {{ nginx_network_name }}:
    driver: overlay
    external: true
{% if create_stack_network is defined and create_stack_network|bool==true %}
 {{ stack_network_name }}:
    driver: overlay
    external: true
{% endif %}
{% if enable_ipv6 is defined and enable_ipv6|bool==true %}      
 bridge:
    external: true
{% endif %}

services:
  {{ deploy_name }}_db:
    image: "{{ corteza_mysql_image }}"
    volumes:
    - {{ deploy_name }}_mysql_data:/var/lib/mysql
    - /etc/localtime:/etc/localtime:ro
    environment:
      MYSQL_ROOT_PASSWORD: "{{ corteza_mysql_root_password }}"
      MYSQL_DATABASE: {{ corteza_mysql_db }}
      MYSQL_USER: {{ corteza_mysql_user }}
      MYSQL_PASSWORD: "{{ corteza_mysql_password }}"
    networks:
{% if create_stack_network is defined and create_stack_network|bool==true %}
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck: { test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-p{{ corteza_mysql_root_password }}"], timeout: 20s, retries: 10 }
#https://docs.cortezaproject.org/corteza-docs/2020.9/dev-ops-guide/index.html
#https://github.com/cortezaproject/corteza-docs/issues/178
{% if corteza_dev_enable is defined and corteza_dev_enable|bool==false %}
  {{ deploy_name }}:
    image: {{ corteza_image }}
    ports:
    - "80"
    networks:
      - {{ nginx_network_name }}
{% if enable_ipv6 is defined and enable_ipv6|bool==true %}
      - bridge
{% endif %}
{% if create_stack_network is defined and create_stack_network|bool==true %}
      - {{ stack_network_name }}
{% endif %}
    volumes:
    - {{ deploy_name }}_data:/data
    - /etc/localtime:/etc/localtime:ro
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck: { test: ["CMD", "curl", "http://localhost/healthcheck"], timeout: 3s, interval: 60s, retries: 10 } #only container/webserver not if checks passed
    env_file: ./.env

{% if enable_corredor is defined and enable_corredor|bool==true %}
  {{ deploy_name }}_corredor:
    image: {{ corredor_image }}
    networks:
{% if create_stack_network is defined and create_stack_network|bool==true %}
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}
    ports:
    - "80"
    environment:
      CORREDOR_EXEC_CSERVERS_API_HOST: "{{ external_domain }}"
      CORREDOR_EXEC_CSERVERS_API_BASEURL_TEMPLATE: "http://{{ deploy_name }}/{service}"
      CORREDOR_LOG_ENABLED: "true"
      CORREDOR_DEBUG: "true"
      CORREDOR_EXT_SERVER_SCRIPTS_WATCH: "true"
#      ANSIBLE_STRATEGY_PLUGINS: /usr/lib/python3.8/site-packages/ansible_mitogen/plugins/strategy
#      ANSIBLE_STRATEGY: mitogen_linear
    volumes:
    - {{ user_path }}/{{ deploy_name }}/corredor:/corredor/usr
#    - /root/.ssh/:/root/.ssh/:ro
#    - ./ansible:/data
{% endif %}

#https://github.com/thecodingmachine/gotenberg
  pdf:
    image: {{ pdf_image }}
    ports:
    - "3000"
    networks:
{% if create_stack_network is defined and create_stack_network|bool==true %}
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}
    volumes:
    - /etc/localtime:/etc/localtime:ro
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/ping"]
      interval: 1m30s
      timeout: 10s
      retries: 3
    environment:
      LOG_LEVEL: INFO
      DISABLE_UNOCONV: 1 #Universal Office Converter

{% else %}
  {{ deploy_name }}:
    image: {{ image_go_dev_ssh }}
    cap_add:
    - SYS_PTRACE
    ports:
    - "80"
    - "{{ host_ssh_port }}:22" # Attention: port {{ host_ssh_port }} is opened on host and bypasses UFW!!! This is ok here, cause you need a valid sshkey but this behavior may be not suspected from docker ;)
    networks:
      - {{ nginx_network_name }}
{% if create_stack_network is defined and create_stack_network|bool==true %}
      - {{ stack_network_name }}
{% endif %}
    volumes:
    - {{ deploy_name }}_data:/data
    - {{ srcpath }}:/go/src/corteza-server
#    - {{ user_path }}/{{ deploy_name }}/.env:/go/src/corteza-server/server/.env
    - "~/.ssh:/root/.ssh"
    - /var/run/docker.sock:/var/run/docker.sock
    - {{ deploy_name }}_vscode_go_tools:{{ user_path }}/go
    - {{ deploy_name }}_vscode:{{ user_path }}/.vscode-server
    - {{ user_path }}/{{ deploy_name }}/launch.json:/go/src/corteza-server/.vscode/launch.json
    - /etc/localtime:/etc/localtime:ro
    working_dir: /go/src/corteza-server
#    tty: true
    command:
      #bash -c "service ssh start && cd /go/src/corteza-server/server && make -C pkg/locale && go mod vendor && make realize && go mod vendor"
       bash -c "service ssh start && cd /go/src/corteza-server/server && make -C pkg/locale && make watch"
    environment:
      - ENVIRONMENT=dev
    deploy:
      restart_policy:
        condition: on-failure
    #healthcheck: { test: ["CMD-SHELL", "ps -ax | sed -e '/awk/d' | awk 'BEGIN{ef=2}; /corteza run -- serve/{ ef=0;}; /vendor/{ ef=1;}; /go build/{ ef=1;}; END{exit (ef)}'"], timeout: 10s, interval: 10s, retries: 10 }
    #healthcheck: { test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider http://localhost/healthcheck"], timeout: 60s, interval: 60s, retries: 10 }
    healthcheck: { test: ["CMD", "curl", "http://localhost/healthcheck"], timeout: 3s, interval: 30s, retries: 5 } #only container/webserver not if all makchecks passed
    env_file: ./.env
{% endif %}

volumes:
  {{ deploy_name }}_mysql_data:
  {{ deploy_name }}_data:
{% if corteza_dev_enable is defined and corteza_dev_enable|bool==true %}
  {{ deploy_name }}_vscode:
  {{ deploy_name }}_vscode_go_tools:
{% endif %}
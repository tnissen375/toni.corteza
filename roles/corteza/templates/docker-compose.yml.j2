#https://docs.cortezaproject.org/corteza-docs/2021.3/devops-guide/index.html#_configure_docker_compose_yaml
version: "3.9"
networks:
 {{ nginx_network_name }}:
    driver: overlay
    external: true
{% if create_stack_network is defined and create_stack_network|bool==true %}      
 {{ stack_network_name }}:
    driver: overlay
    external: true
{% endif %}
{% if enable_ipv6 is defined and enable_ipv6|bool==true %}      
 bridge:
    external: true
{% endif %} 

services:
  {{ deploy_name }}_db:
    image: "{{ corteza_mysql_image }}"
    volumes:
    - {{ deploy_name }}_mysql_data:/var/lib/mysql
    - /etc/localtime:/etc/localtime:ro
    environment:
      MYSQL_ROOT_PASSWORD: "{{ corteza_mysql_root_password }}"
      MYSQL_DATABASE: {{ corteza_mysql_db }}
      MYSQL_USER: {{ corteza_mysql_user }}
      MYSQL_PASSWORD: "{{ corteza_mysql_password }}"
    networks:      
{% if create_stack_network is defined and create_stack_network|bool==true %}      
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}      
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck: { test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-p{{ corteza_mysql_root_password }}"], timeout: 20s, retries: 10 }
#https://docs.cortezaproject.org/corteza-docs/2020.9/dev-ops-guide/index.html
#https://github.com/cortezaproject/corteza-docs/issues/178
{% if corteza_dev_enable is defined and corteza_dev_enable|bool==false %}
  {{ deploy_name }}:
    image: {{ corteza_image }}
    ports:
    - "80"
    environment:      
      CORREDOR_ENABLED: "true"
      CORREDOR_ADDR: "corredor:80"
      AUTH_BASE_URL: "https://{{ external_domain }}/auth"
      PROVISION_SETTINGS_AUTH_EXTERNAL_OIDC: "{{ keycloak_client_name }} https://{{ auth_provider_domain }}/auth/realms/{{ keycloak_realm}} {{ keycloak_client_name }} {{ keycloak_client_secret }}"
      PROVISION_SETTINGS_AUTH_EXTERNAL_ENABLED: "true"
      AUTH_EXTERNAL_REDIRECT_URL: "https://{{ external_domain }}/auth/external/openid-connect.{{ keycloak_client_name }}/callback"
      PROVISION_SETTINGS_AUTH_EMAIL_FROM_ADDRESS: "accounts@{{ domain }}"
      PROVISION_SETTINGS_AUTH_EMAIL_FROM_NAME: "Accounts" 
      CORTEZA_DB_NAME: "{{ deploy_name }}"
      CORTEZA_DB_HOST: "{{ deploy_name }}_db"
      CORTEZA_DB_USER: "{{ deploy_name }}"
      CORTEZA_DB_PASSWORD: "{{ corteza_mysql_password }}"
      TEMPLATE_RENDERER_GOTENBERG_ADDRESS: "http://pdf:3000"
      TEMPLATE_RENDERER_GOTENBERG_ENABLED: "true"
      DOMAIN: "{{ external_domain }}"
      VERSION: "{{ corteza_image_version }}"
      DB_DSN: "{{ deploy_name }}:{{ corteza_mysql_password }}@tcp({{ deploy_name }}_db:3306)/{{ deploy_name }}?collation=utf8mb4_general_ci"
      # Running all-in-one and serving web applications directly from server container
      HTTP_WEBAPP_ENABLED: "true"
      # Send action log to container logs as well
      #ACTIONLOG_ENABLED: "true"
      ACTIONLOG_DEBUG: "true"
      # Uncomment for extra debug info if something goes wrong
      # LOG_LEVEL: "debug"
      # Use nicer and colorful log instead of JSON
      # LOG_DEBUG: "true"
      # SMTP (mail sending) settings
      # Point this to your local or external SMTP server if you want to send emails.
      # In most cases, Corteza can detect that SMTP is disabled and skips over sending emails without an error
      SMTP_HOST: "{{ keycloak_smtp_host }}:{{ keycloak_smtp_port }}"
      SMTP_USER: "{{ keycloak_smtp_user }}"
      SMTP_PASS: "{{ keycloak_smtp_password }}"
      SMTP_FROM: '"{{ keycloak_smtp_display_name }}" <{{ keycloak_smtp_from }}>'      
    networks:
      - {{ nginx_network_name }}
{% if enable_ipv6 is defined and enable_ipv6|bool==true %}      
      - bridge
{% endif %} 
{% if create_stack_network is defined and create_stack_network|bool==true %}      
      - {{ stack_network_name }}
{% endif %}      
    volumes:
    - {{ deploy_name }}_data:/data
    - /etc/localtime:/etc/localtime:ro
    deploy:
      restart_policy:
        condition: on-failure      
    healthcheck: { test: ["CMD", "curl", "http://localhost/healthcheck"], timeout: 3s, interval: 60s, retries: 10 } #only container/webserver not if checks passed

  {{ deploy_name }}_corredor:
    image: cortezaproject/corteza-server-corredor:{{ corteza_image_version }}
    networks:
{% if create_stack_network is defined and create_stack_network|bool==true %}      
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}   
    ports:
    - "80"
    environment:
      CORREDOR_EXEC_CSERVERS_API_HOST: "{{ external_domain }}"
      CORREDOR_EXEC_CSERVERS_API_BASEURL_TEMPLATE: "http://{{ deploy_name }}/{service}"
    volumes:
    - {{ user_path }}/{{ deploy_name }}/corredor:/corredor/usr

#https://github.com/thecodingmachine/gotenberg        
  pdf:
    image: {{ pdf_image }}
    ports:
    - "3000"
    networks:
{% if create_stack_network is defined and create_stack_network|bool==true %}      
      - {{ stack_network_name }}
{% else %}
      - {{ nginx_network_name }}
{% endif %}
    volumes:
    - /etc/localtime:/etc/localtime:ro
    deploy:
      restart_policy:
        condition: on-failure      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/ping"]
      interval: 1m30s
      timeout: 10s
      retries: 3
    environment:
      LOG_LEVEL: INFO
      DISABLE_UNOCONV: 1 #Universal Office Converter

{% else %}
  {{ deploy_name }}:
    image: {{ image_go_dev_ssh }}
    cap_add:
    - SYS_PTRACE 
    ports:
    - "80"
    - "{{ host_ssh_port }}:22" # Attention: port {{ host_ssh_port }} is opened on host and bypasses UFW!!! This is ok here, cause you need a valid sshkey but this behavior may be not suspected from docker ;)
    networks:
      - {{ nginx_network_name }}
{% if create_stack_network is defined and create_stack_network|bool==true %}      
      - {{ stack_network_name }}
{% endif %}      
    volumes:
    - {{ deploy_name }}_data:/data
    - {{ user_path }}/{{ deploy_name }}/src:/go/src/corteza-server
    - {{ user_path }}/{{ deploy_name }}/.env:/go/src/corteza-server/.env
    - "~/.ssh:/root/.ssh"
    - /var/run/docker.sock:/var/run/docker.sock
    - {{ deploy_name }}_vscode_go_tools:{{ user_path }}/go
    - {{ deploy_name }}_vscode:{{ user_path }}/.vscode-server
    #- {{ user_path }}/{{ deploy_name }}/launch.json/.vscode-server/.launch.json
    - /etc/localtime:/etc/localtime:ro
    working_dir: /go/src/corteza-server
    tty: true
    command:
      bash -c "service ssh start && go mod vendor && make realize"
    deploy:
      restart_policy:
        condition: on-failure
    #healthcheck: { test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider http://localhost/healthcheck"], timeout: 3s, interval: 60s, retries: 10 } #go webserver answers 405?!?
    #healthcheck: { test: ["CMD", "curl", "http://localhost/healthcheck"], timeout: 3s, interval: 30s, retries: 5 } #only container/webserver not if all makchecks passed
{% endif %}

volumes:
  {{ deploy_name }}_mysql_data:
  {{ deploy_name }}_data:
{% if corteza_dev_enable is defined and corteza_dev_enable|bool==true %}
  {{ deploy_name }}_vscode:
  {{ deploy_name }}_vscode_go_tools:
{% endif %}
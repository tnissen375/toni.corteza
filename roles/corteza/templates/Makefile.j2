TAIL=20
d=$$(date +%Y%m%d_%H:%M:%S)

DB := $$(docker ps -a | grep "Up" | awk '{print $$NF}' | grep -w "{{ deploy_name }}_{{ deploy_name }}_db\.*")
CORTEZA := $$(docker ps -a | grep "Up" | awk '{print $$NF}' | grep -w "{{ deploy_name }}_{{ deploy_name }}\.*")
{% if enable_corredor is defined and enable_corredor|bool==true %}
CORREDOR := $$(docker ps -a | grep "Up" | awk '{print $$NF}' | grep -w "corteza_corredor\.*")
{% endif %}
NGINX := $$(docker ps -a | grep "Up" | awk '{print $$NF}' | grep -w "{{ nginx_stack }}_nginx-proxy\.*")
{% if corteza_dev_enable is defined and corteza_dev_enable|bool==false %}
BIN := corteza-server
{% else %}
BIN := /go/src/corteza-server/server/build/gin-bin
{% endif %}

{% if enable_corredor is defined and enable_corredor|bool==true %}
completebackup: bckup stopcorteza bckupdb bckupansible bckupcorredor rm deploy purge
hotbackup: bckup bckupdb bckupansible bckupcorredor purge
{% else %}
completebackup: bckup stopcorteza bckupdb rm deploy purge
hotbackup: bckup bckupdb rm deploy purge
{% endif %}

.PHONY: rm rmapp rmapps deployapp stopcorteza deploy sinkhelp sink debugdev ps log logdb exec execdb corteza bckup bckupansible bckupcorredor restorecorredor restore bckupdb restoredb logindb purge appmake servermake serverbin vendor realize

rm:
	docker stack rm {{ deploy_name }}

rmapp:
	docker stack rm $(name)

rmapps:
	docker stack rm $(docker stack ls | grep dev | awk '{print $1}')

deployapp:
	docker stack deploy -c docker-compose-$(name).yml $(name) && docker exec -it $(NGINX) nginx -s reload

stopcorteza:
	docker stop $(CORTEZA)

deploy:
	docker stack deploy -c docker-compose.yml {{ deploy_name }} && docker exec -it $(NGINX) nginx -s reload

sinkhelp:
	docker exec $(CORTEZA) $(BIN) sink signature -h

sink:
	docker exec $(CORTEZA) $(BIN) sink signature --method POST --content-type email

{% if corteza_dev_enable is defined and corteza_dev_enable|bool==true %}
debugdev:
	docker exec -d $(CORTEZA) sh -c 'kill $$(pgrep dlv) || echo "dlv not running" && dlv attach -l 127.0.0.1:42325 --headless --log=true --accept-multiclient --api-version=2 $$(pgrep gin-bin)'

corteza:
	docker exec $(CORTEZA) sh -c '$(BIN) $(cmd)'

{% endif %}
ps:
	docker stack ps {{ deploy_name }} --no-trunc

log:
	docker service logs -f $(CORTEZA) --tail ${TAIL} --raw

logdb:
	docker service logs -f $(DB) --tail ${TAIL}

exec:
	docker exec -it $(CORTEZA) /bin/bash

execdb:
	docker exec -it $(DB) /bin/bash

bckup:
	docker exec $(CORTEZA) sh -c 'exec tar -cv /data' | gzip > {{ user_path }}/{{ deploy_name }}/backup/corteza_"$d".tar.gz

{% if enable_corredor is defined and enable_corredor|bool==true %}
bckupansible:
	docker exec $(CORREDOR) sh -c 'exec tar -cv /data' | gzip > /root/corteza/backup/ansible_"$d".tar.gz

bckupcorredor:
	docker exec $(CORREDOR) sh -c 'exec tar -cv /corredor/usr' | gzip > /root/corteza/backup/corredor_"$d".tar.gz

restorecorredor:
	gunzip -c $(file) | docker cp - $(CORREDOR):/
{% endif %}

restore:
	gunzip -c $(file) | docker cp - $(CORTEZA):/

bckupdb:
	docker exec $(DB) sh -c 'exec mysqldump -uroot -p"$$MYSQL_ROOT_PASSWORD" {{ corteza_mysql_db }}' | gzip > {{ user_path }}/{{ deploy_name }}/backup/{{ corteza_mysql_db }}_db_"$d".sql.gz

restoredb:
	gunzip -c $(file) | docker exec -i $(DB) sh -c 'exec mysql -u root -p"$$MYSQL_ROOT_PASSWORD" {{ corteza_mysql_db }}'

logindb:
	docker exec -it $(DB) sh -c 'exec mysql -uroot -p"$$MYSQL_ROOT_PASSWORD" {{ corteza_mysql_db }}'

purge:
	find {{ user_path }}/{{ deploy_name }}/backup/*.gz  -mtime +10 -delete &> /dev/null

appmake:
	docker exec $(CORTEZA) sh -c 'exec make --directory=/go/src/corteza-server/server/webapp $(cmd)'

servermake:
	docker exec $(CORTEZA) sh -c 'exec make --directory=/go/src/corteza-server/server $(cmd)'

serverbin:
	docker exec $(CORTEZA) $(BIN) $(CMD)

vendor:
	docker exec $(CORTEZA) sh -c 'exec go mod vendor'

realize:
	docker exec $(CORTEZA) sh -c 'exec make realize'

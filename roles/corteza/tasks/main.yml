---
- set_fact:
    corteza_dev_enable: true
  tags: [ never, dev]

- set_fact:
    corteza_app_enable: true
  tags: [ never, app]  

- name: Register nginx.conf file
  stat:
    path: "{{ nginx_conf_dir }}/nginx.conf"
  register: nginx_conf_file  

- file:
    state: directory
    path: "{{ item }}"
    recurse: yes
  loop:
    "{{ dir_exists }}"

- name: Deploy .env
  template:
    src: ".env.j2"
    dest: "{{ user_path }}/{{ deploy_name }}/.env"
  tags: [ never, dev]
  when: nginx_conf_file.stat.exists

# - name: Deploy backup script
#   template:
#     src: "backup.sh.j2"
#     dest: "{{ user_path }}/{{ deploy_name }}/backup/backup.sh"
#     mode: u+x

- name: Deploy Make
  template:
    src: "Makefile.j2"
    dest: "{{ user_path }}/{{ deploy_name }}/Makefile"

- name: Git checkout corteza code
  git:
    repo: "{{ corteza_dev_repository }}"
    dest: "{{ user_path }}/{{ deploy_name }}/src"
    version: "{{ corteza_dev_version }}"
    force: yes
  tags: [ never, dev]

- name: Git checkout corteza app
  git:
    repo: "{{ corteza_app_repository }}"
    dest: "{{ user_path }}/{{ deploy_name }}/src/"
    version: "{{ corteza_app_version }}"
    force: yes
  tags: [ never, app]  

# todo: Websockets need a closer look, maybe some changes in nginx conf are needed
- name: Replace host cause it does not work with online dev server
  when: corteza_app_enable is defined and corteza_app_enable|bool==true
  replace:
    path: "{{ user_path }}/{{ deploy_name }}/src/vue.config-builder.js"
    regexp: '127.0.0.1'
    replace: "0.0.0.0"

- name: Create network
  include_role:
    name: toni.docker
    tasks_from: create_network
  vars:
    ipam_driver_options:
      encrypted: "false"
    docker_networks:
      - { name: "{{ stack_network_name }}", subnet: "{{ stack_subnet }}", driver: "overlay", internal: 'no', gateway: "" }
  when: create_stack_network|default(false)

- name: Deploy vhost
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/{{ external_domain }}.conf"
  when: nginx_conf_file.stat.exists
  
- name: Copy snippets
  include_role:
    name: toni.openresty
    tasks_from: snippets
  vars:  
    keycloak_access_group: "{{ access_group }}"
    nginx_snippets:
      - { srcname: "auth.conf.j2", destname: "{{ access_group }}_auth.conf" }

- name: Configure nginx logs
  when: nginx_conf_file.stat.exists
  include_role:
    name: toni.openresty
    tasks_from: logs

# - name: Register image file
#   stat:
#     path: "{{ user_path }}/{{ image_file_sshd }}"
#   register: image_file
#   tags: [ never, dev]

# - name: remove images
#   when: force_images|default(false)
#   docker_image:
#     name: "{{ image_sshd }}"
#     force_absent: yes
#     state: absent    
#   tags: [ never, dev]

# - name: copy tarball to host
#   when: not image_file.stat.exists or force_images|default(false)
#   copy:
#     src: "/{{ user }}/{{ image_file_sshd }}"
#     dest: "{{ user_path }}/{{ image_file_sshd }}"
#   tags: [ never, dev]

# - name: load container from tarball
#   docker_image:
#     name: "{{ image_sshd }}"
#     load_path: "{{ user_path }}/{{ image_file_sshd }}"
#     state: present
#     source: load
#   tags: [ never, dev]

- name: Register image file
  stat:
    path: "{{ user_path }}/{{ image_file_go_dev_ssh }}"
  register: image_file
  tags: [ never, dev]

- name: remove images
  when: force_images|default(false)
  docker_image:
    name: "{{ image_go_dev_ssh }}"
    force_absent: yes
    state: absent    
  tags: [ never, dev]

- name: copy tarball to host
  when: not image_file.stat.exists or force_images|default(false)
  copy:
    src: "/{{ user }}/{{ image_file_go_dev_ssh }}"
    dest: "{{ user_path }}/{{ image_file_go_dev_ssh }}"
  tags: [ never, dev]

- name: load container from tarball
  docker_image:
    name: "{{ image_go_dev_ssh }}"
    load_path: "{{ user_path }}/{{ image_file_go_dev_ssh }}"
    state: present
    source: load
  tags: [ never, dev]

- name: Register image file
  stat:
    path: "{{ user_path }}/{{ image_file_node_ssh }}"
  register: image_file
  tags: [ never, app]

- name: remove images
  when: force_images|default(false)
  docker_image:
    name: "{{ image_node_ssh }}"
    force_absent: yes
    state: absent    
  tags: [ never, app]

- name: copy tarball to host
  when: not image_file.stat.exists or force_images|default(false)
  copy:
    src: "/{{ user }}/{{ image_file_node_ssh }}"
    dest: "{{ user_path }}/{{ image_file_node_ssh }}"
  tags: [ never, app]

- name: load container from tarball
  docker_image:
    name: "{{ image_node_ssh }}"
    load_path: "{{ user_path }}/{{ image_file_node_ssh }}"
    state: present
    source: load
  tags: [ never, app]

- name: stop nginx stack
  docker_stack:
    state: absent
    name: nginx
    compose:
      - "{{ user_path }}/openresty/docker-compose.yml"

- name: restart nginx stack
  docker_stack:
    state: present
    prune: yes
    name: nginx
    compose:
      - "{{ user_path }}/openresty/docker-compose.yml"

- name: set cert facts 
  when: not existing_certs|bool
  include_role:
    name: toni.certificates
    tasks_from: certbot_facts
  vars:
    certbot_server: "{{ nginx_subdomain }}{{ nginx_domain }}"
    record_dns_create: "{{ dns_create }}"
    record_dns_update: "{{ dns_update }}"

# .conf!!!
- name: Deploy vhost
  when: not existing_certs|bool and certbot_cert_exists|bool
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/{{ external_domain }}.conf"
  
- name: stop nginx stack
  docker_stack:
    state: absent
    name: nginx
    compose:
      - "{{ user_path }}/openresty/docker-compose.yml"

- name: restart nginx stack
  docker_stack:
    state: present
    prune: yes
    name: nginx
    compose:
      - "{{ user_path }}/openresty/docker-compose.yml"

- name: Deploy compose file
  when: corteza_app_enable is defined and corteza_app_enable|bool==false
  template:
    src: docker-compose.yml.j2
    dest: "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Deploy compose app file
  when: corteza_app_enable is defined and corteza_app_enable|bool==true
  template:
    src: docker-compose-app.yml.j2
    dest: "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: Deploy config app file
  when: corteza_app_enable is defined and corteza_app_enable|bool==true
  template:
    src: config.js.j2
    dest: "{{ user_path }}/{{ deploy_name }}/src/public/config.js"

- name: Deploy config app file
  when: corteza_app_enable is defined and corteza_app_enable|bool==true
  template:
    src: healthcheck.js.j2
    dest: "{{ user_path }}/{{ deploy_name }}/src/healthcheck.js"

- name: restart {{ deploy_name }} stack
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart {{ deploy_name }} stack
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"



#make --directory=/go/src/corteza-server/webapp